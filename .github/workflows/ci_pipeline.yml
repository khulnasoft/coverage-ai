name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Checks for changes in version.txt (used for release job)
  changes:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.filter.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            version_changed:
              - 'coverage_ai/version.txt'
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures we fetch all history for all branches
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies using Poetry
        run: poetry install
      - name: Run tests and generate reports
        env:
          OPENAI_API_KEY: "This_is_a_fake_API_key"
        run: |
          poetry run pytest --junitxml=testLog.xml --cov=coverage_ai --cov-report=xml:cobertura.xml --cov-report=term --cov-fail-under=70 --log-cli-level=INFO
      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: testLog.xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: cobertura.xml
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.12.2/x64
          LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.2/x64/lib

  package-test:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies using Poetry
        run: poetry install
      - name: Build, Install and Test Package from Different Location
        run: |
          poetry build
          pip install dist/*.whl
          cd /tmp
          coverage-ai --help        
  build:
    needs: test
    strategy:
      matrix:
       os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install Dependencies
      run: |
        pip install poetry
        poetry install
    - name: Build Executable
      run: |
        poetry run pyinstaller --add-data "coverage_ai/version.txt:." --add-data "coverage_ai/settings/language_extensions.toml:." --add-data "coverage_ai/settings/test_generation_prompt.toml:." --hidden-import=tiktoken_ext.openai_public --hidden-import=tiktoken_ext --onefile --name coverage-ai-${{ matrix.os }} coverage_ai/main.py
    - name: Test Executable (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: .\dist\coverage-ai-${{ matrix.os }}.exe --help
      shell: pwsh
    - name: Test Executable (Unix)
      if: ${{ matrix.os != 'windows-latest' }}
      run: ./dist/coverage-ai-${{ matrix.os }} --help
      shell: bash
    - name: Upload Executable
      uses: actions/upload-artifact@v4
      with:
        name: coverage-ai-${{ matrix.os }}
        path: dist/coverage-ai-${{ matrix.os }}*

  release:
    needs: [build, changes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download executables
      uses: actions/download-artifact@v4
      with:
        path: dist
    - name: Extract version
      run: |
        echo "VERSION=$(cat coverage_ai/version.txt)" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/coverage-ai-ubuntu-latest/coverage-ai-ubuntu-latest
        asset_name: coverage-ai-ubuntu
        asset_content_type: application/octet-stream
    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/coverage-ai-windows-latest/coverage-ai-windows-latest.exe
        asset_name: coverage-ai-windows.exe
        asset_content_type: application/octet-stream
    - name: Upload Release Asset (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/coverage-ai-macos-latest/coverage-ai-macos-latest
        asset_name: coverage-ai-macos
        asset_content_type: application/octet-stream
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
        repository: coverage-ai
        build: poetry build
        publish_command: |
          poetry publish --repository pypi
          poetry publish --repository testpypi
